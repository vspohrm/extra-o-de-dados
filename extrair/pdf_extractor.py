#!/usr/bin/env python3
"""
Detector de Gr√°ficos em PDF - Vers√£o Final
Foco na precis√£o e robustez
"""

import json
import sys
import re
from pathlib import Path
import datetime

# Verificar PyMuPDF
try:
    import fitz
    print("‚úÖ PyMuPDF dispon√≠vel")
except ImportError:
    print("‚ùå Execute: pip install PyMuPDF")
    sys.exit(1)


class PreciseChartDetector:
    """Detector preciso de gr√°ficos com foco em padr√µes espec√≠ficos."""

    @staticmethod
    def analyze_page_for_charts(doc, page_num: int) -> dict:
        """An√°lise completa de uma p√°gina para detectar gr√°ficos."""
        page = doc[page_num]
        print(f"\nüîç Analisando p√°gina {page_num + 1}")
        print(f"üìê Dimens√µes: {page.rect.width:.0f} x {page.rect.height:.0f}")

        analysis = {
            "page_number": page_num + 1,
            "chart_score": 0.0,
            "indicators": [],
            "elements": {
                "images": {"count": 0, "large_count": 0, "details": []},
                "vectors": {"count": 0, "lines_h": 0, "lines_v": 0, "rectangles": 0},
                "text": {"numbers": [], "keywords": [], "total_words": 0}
            },
            "conclusion": ""
        }

        # 1. AN√ÅLISE DE IMAGENS
        images = page.get_images(full=True)
        analysis["elements"]["images"]["count"] = len(images)
        print(f"üì∏ Imagens encontradas: {len(images)}")

        for i, img in enumerate(images):
            try:
                pix = fitz.Pixmap(doc, img[0])
                # Tratar colorspace problem√°tico
                if pix.colorspace and pix.colorspace.name in ["DeviceN", "Separation", "Lab", "ICCBased"]:
                    pix_rgb = fitz.Pixmap(fitz.csRGB, pix)
                    pix = pix_rgb

                pixels = pix.width * pix.height
                aspect = round(pix.width / pix.height, 2) if pix.height > 0 else 0
                img_detail = {
                    "index": i,
                    "dimensions": f"{pix.width}x{pix.height}",
                    "pixels": pixels,
                    "aspect_ratio": aspect,
                    "size_mb": round(len(pix.tobytes()) / 1024 / 1024, 3)
                }
                print(f" Img {i+1}: {img_detail['dimensions']} ({pixels:,} px, ratio: {aspect})")

                # Classificar imagem
                if pixels > 100000:  # Grande
                    analysis["elements"]["images"]["large_count"] += 1
                    img_detail["category"] = "large"

                    # Caracter√≠sticas t√≠picas de gr√°fico
                    chart_features = 0
                    if 50000 <= pixels <= 800000:  # Tamanho t√≠pico de gr√°fico
                        chart_features += 1
                    if 0.6 <= aspect <= 2.5:  # Propor√ß√£o t√≠pica
                        chart_features += 1
                    if pix.width > 300 and pix.height > 200:  # Dimens√µes substanciais
                        chart_features += 1
                    img_detail["chart_features"] = chart_features

                    if chart_features >= 2:
                        print(f" üéØ FORTE CANDIDATO A GR√ÅFICO! ({chart_features}/3 caracter√≠sticas)")
                        analysis["chart_score"] += 0.4
                        analysis["indicators"].append(f"large_chart_image_{i+1}")
                elif pixels > 20000:
                    img_detail["category"] = "medium"
                    print(f" üìä Poss√≠vel gr√°fico m√©dio")
                    analysis["chart_score"] += 0.2
                else:
                    img_detail["category"] = "small"
                    print(f" üî∏ Imagem pequena")

                analysis["elements"]["images"]["details"].append(img_detail)
                pix = None
            except Exception as e:
                print(f" ‚ùå Erro na imagem {i}: {e}")
                analysis["elements"]["images"]["details"].append({
                    "index": i, "error": str(e)
                })

        # 2. AN√ÅLISE DE ELEMENTOS VETORIAIS
        drawings = page.get_drawings()
        analysis["elements"]["vectors"]["count"] = len(drawings)
        print(f"üé® Elementos vetoriais: {len(drawings)}")

        all_lines_h = []
        all_lines_v = []
        rectangles = []

        for drawing in drawings:
            items = drawing.get("items", [])
            for item in items:
                if not item or len(item) < 2:
                    continue
                item_type = item[0]
                coords = item[1]
                if item_type == "l" and len(coords) >= 4:  # Linha
                    x1, y1, x2, y2 = coords[0], coords[1], coords[2], coords[3]
                    dx, dy = abs(x2 - x1), abs(y2 - y1)
                    length = (dx**2 + dy**2)**0.5
                    if dy < 5 and dx > 30:  # Linha horizontal
                        all_lines_h.append({
                            "y": round((y1 + y2) / 2, 1),
                            "x_start": round(min(x1, x2), 1),
                            "x_end": round(max(x1, x2), 1),
                            "length": round(length, 1)
                        })
                        analysis["elements"]["vectors"]["lines_h"] += 1
                    elif dx < 5 and dy > 30:  # Linha vertical
                        all_lines_v.append({
                            "x": round((x1 + x2) / 2, 1),
                            "y_start": round(min(y1, y2), 1),
                            "y_end": round(max(y1, y2), 1),
                            "length": round(length, 1)
                        })
                        analysis["elements"]["vectors"]["lines_v"] += 1
                elif item_type == "re":  # Ret√¢ngulo
                    rectangles.append(coords)
                    analysis["elements"]["vectors"]["rectangles"] += 1

        print(f" Linhas H: {len(all_lines_h)}, V: {len(all_lines_v)}, Ret√¢ngulos: {len(rectangles)}")

        # 3. DETECTAR PADR√ïES DE EIXOS
        axes_detected = False
        grid_detected = False

        # Eixos perpendiculares
        intersections = 0
        for h_line in all_lines_h:
            for v_line in all_lines_v:
                # Verificar interse√ß√£o
                if (h_line["x_start"] <= v_line["x"] <= h_line["x_end"] and
                        v_line["y_start"] <= h_line["y"] <= v_line["y_end"]):
                    intersections += 1

        if intersections > 0:
            axes_detected = True
            analysis["chart_score"] += 0.3
            analysis["indicators"].append("perpendicular_axes")
            print(f" üéØ Eixos perpendiculares detectados! ({intersections} interse√ß√µes)")

        # Grade (m√∫ltiplas linhas paralelas)
        if len(all_lines_h) >= 3 and len(all_lines_v) >= 2:
            grid_detected = True
            analysis["chart_score"] += 0.25
            analysis["indicators"].append("grid_pattern")
            print(f" üìä Grade detectada!")

        # Padr√£o de barras
        if len(rectangles) >= 3:
            analysis["chart_score"] += 0.2
            analysis["indicators"].append("bar_pattern")
            print(f" üìä Padr√£o de barras detectado!")

        # 4. AN√ÅLISE DE TEXTO
        text = page.get_text()
        words = text.split() if text else []
        analysis["elements"]["text"]["total_words"] = len(words)

        # Detectar n√∫meros isolados (labels de eixo)
        numbers = []
        for word in words:
            if re.match(r'^\d+(\.\d+)?$', word):
                numbers.append(word)
        analysis["elements"]["text"]["numbers"] = numbers

        # Palavras-chave de gr√°fico
        chart_keywords = [
            'gr√°fico', 'chart', 'figura', 'dados', 'm√©dia', 'total',
            'evolu√ß√£o', 'tend√™ncia', 'compara√ß√£o', '%', 'percentual'
        ]
        keywords_found = []
        for word in words:
            for keyword in chart_keywords:
                if keyword.lower() in word.lower():
                    keywords_found.append(word)
        analysis["elements"]["text"]["keywords"] = list(set(keywords_found))

        print(f"üìù Texto: {len(words)} palavras, {len(numbers)} n√∫meros")
        if len(numbers) >= 4:
            analysis["chart_score"] += 0.15
            analysis["indicators"].append("numeric_labels")
            print(f" üî¢ Labels num√©ricos: {', '.join(numbers[:8])}")
        if keywords_found:
            analysis["chart_score"] += 0.1
            analysis["indicators"].append("chart_keywords")
            print(f" üè∑Ô∏è Palavras-chave: {', '.join(keywords_found[:5])}")
        # Percentuais
        if '%' in text or 'percent' in text.lower():
            analysis["chart_score"] += 0.1
            analysis["indicators"].append("percentages")
            print(f" üìä Percentuais detectados")

        # 5. AN√ÅLISE DE LAYOUT
        # P√°ginas de gr√°fico tendem a ter pouco texto
        if len(words) < 100 and (axes_detected or analysis["elements"]["images"]["large_count"] > 0):
            analysis["chart_score"] += 0.15
            analysis["indicators"].append("minimal_text_page")
            print(f" üìÑ Layout t√≠pico de p√°gina de gr√°fico (pouco texto)")

        # 6. CONCLUS√ÉO
        final_score = round(min(analysis["chart_score"], 1.0), 3)
        analysis["chart_score"] = final_score
        if final_score >= 0.7:
            analysis["conclusion"] = "ALTA probabilidade de gr√°fico"
            confidence = "high"
        elif final_score >= 0.4:
            analysis["conclusion"] = "M√âDIA probabilidade de gr√°fico"
            confidence = "medium"
        else:
            analysis["conclusion"] = "BAIXA probabilidade de gr√°fico"
            confidence = "low"
        analysis["confidence"] = confidence
        print(f"üìä SCORE FINAL: {final_score}")
        print(f"üéØ {analysis['conclusion']}")
        return analysis


def analyze_specific_page(file_path: str, page_number: int, save_images: bool = True):
    """An√°lise focada em uma p√°gina espec√≠fica."""
    print(f"üéØ AN√ÅLISE ESPEC√çFICA - P√ÅGINA {page_number}")
    print(f"üìÑ Arquivo: {Path(file_path).name}")
    try:
        doc = fitz.open(file_path)
        if page_number > len(doc) or page_number < 1:
            print(f"‚ùå P√°gina {page_number} n√£o existe (total: {len(doc)})")
            return

        # An√°lise da p√°gina
        result = PreciseChartDetector.analyze_page_for_charts(doc, page_number - 1)

        # Salvar imagens se solicitado
        if save_images and result["elements"]["images"]["count"] > 0:
            page = doc[page_number - 1]
            output_dir = Path(file_path).parent / f"page_{page_number}_elements"
            output_dir.mkdir(exist_ok=True)
            images = page.get_images(full=True)
            for i, img in enumerate(images):
                try:
                    pix = fitz.Pixmap(doc, img[0])
                    if pix.colorspace and pix.colorspace.name in ["DeviceN", "Separation", "Lab", "ICCBased"]:
                        pix_rgb = fitz.Pixmap(fitz.csRGB, pix)
                        pix = pix_rgb
                    img_file = output_dir / f"element_{i+1}.png"
                    pix.save(str(img_file))
                    print(f"üíæ Elemento salvo: {img_file}")
                    pix = None
                except Exception as e:
                    print(f"‚ùå Erro ao salvar elemento {i+1}: {e}")

        # Salvar an√°lise
        analysis_file = Path(file_path).parent / f"chart_analysis_page_{page_number}.json"
        # Garantir que tudo √© serializ√°vel
        clean_result = json.loads(json.dumps(result, default=str))
        with open(analysis_file, 'w', encoding='utf-8') as f:
            json.dump(clean_result, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ An√°lise salva em: {analysis_file}")
        doc.close()
        return result
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return None


def scan_all_pages(file_path: str):
    """Escaneia todas as p√°ginas procurando gr√°ficos."""
    print(f"üîç ESCANEANDO TODO O DOCUMENTO")
    print(f"üìÑ Arquivo: {Path(file_path).name}")
    try:
        doc = fitz.open(file_path)
        print(f"üìä Total de p√°ginas: {len(doc)}")
        results = {
            "document": Path(file_path).name,
            "total_pages": len(doc),
            "scan_timestamp": str(datetime.datetime.now()),
            "pages": {},
            "summary": {
                "chart_pages": [],
                "best_candidates": []
            }
        }

        # Analisar cada p√°gina
        for page_num in range(len(doc)):
            print(f"\nüìÑ P√°gina {page_num + 1}:")
            analysis = PreciseChartDetector.analyze_page_for_charts(doc, page_num)
            page_key = f"page_{page_num + 1}"
            results["pages"][page_key] = analysis
            # Se tem alta probabilidade, adicionar aos candidatos
            if analysis["chart_score"] >= 0.4:
                results["summary"]["chart_pages"].append(page_num + 1)
                results["summary"]["best_candidates"].append({
                    "page": page_num + 1,
                    "score": analysis["chart_score"],
                    "confidence": analysis["confidence"],
                    "main_indicators": analysis["indicators"][:3]  # Top 3
                })

        # Ordenar candidatos por score
        results["summary"]["best_candidates"].sort(key=lambda x: x["score"], reverse=True)

        # Resumo final
        print(f"\nüìã RESUMO FINAL:")
        print(f" üìä P√°ginas com gr√°ficos prov√°veis: {len(results['summary']['chart_pages'])}")
        if results["summary"]["best_candidates"]:
            print(f" üèÜ Melhores candidatos:")
            for candidate in results["summary"]["best_candidates"][:3]:
                print(f" üìÑ P√°gina {candidate['page']}: score {candidate['score']:.3f} ({candidate['confidence']})")
                print(f" Indicadores: {', '.join(candidate['main_indicators'])}")

        # Salvar resultado
        output_file = Path(file_path).parent / f"scan_completo_{Path(file_path).stem}.json"
        # Garantir serializa√ß√£o
        clean_results = json.loads(json.dumps(results, default=str))
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(clean_results, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ Scan completo salvo em: {output_file}")
        doc.close()
        return results
    except Exception as e:
        print(f"‚ùå Erro no scan: {e}")
        return None


def extract_page_4_optimized(file_path: str):
    """Extra√ß√£o otimizada especificamente para p√°gina 4."""
    print("üéØ EXTRA√á√ÉO OTIMIZADA - P√ÅGINA 4")
    print("Focando em detectar o gr√°fico que voc√™ mencionou...")
    # Primeiro, an√°lise r√°pida
    result = analyze_specific_page(file_path, 4, save_images=True)
    if result and result.get("chart_score", 0) >= 0.3:
        print(f"\n‚úÖ GR√ÅFICO DETECTADO NA P√ÅGINA 4!")
        print(f" Score: {result['chart_score']}")
        print(f" Confian√ßa: {result['confidence']}")
        print(f" Indicadores: {', '.join(result['indicators'])}")
        # Detalhes espec√≠ficos
        images = result["elements"]["images"]
        if images["large_count"] > 0:
            print(f"\nüìä ELEMENTOS DO GR√ÅFICO:")
            for img in images["details"]:
                if img.get("category") == "large":
                    print(f" üéØ Imagem principal: {img['dimensions']} ({img['pixels']:,} pixels)")
                    print(f" Propor√ß√£o: {img['aspect_ratio']} (ideal para gr√°fico: 0.6-2.5)")
                    print(f" Tamanho: {img['size_mb']} MB")
        vectors = result["elements"]["vectors"]
        if vectors["lines_h"] > 0 or vectors["lines_v"] > 0:
            print(f" üìê Estrutura vetorial:")
            print(f" Linhas horizontais: {vectors['lines_h']}")
            print(f" Linhas verticais: {vectors['lines_v']}")
            print(f" Ret√¢ngulos: {vectors['rectangles']}")
    else:
        print(f"\nü§î Detec√ß√£o inconclusiva na p√°gina 4")
        print(f" Score: {result.get('chart_score', 0) if result else 'erro'}")
        print(" Pode ser um gr√°fico mais simples ou com padr√£o n√£o convencional")


def main():
    """Fun√ß√£o principal com comandos espec√≠ficos."""
    print("üöÄ Detector Preciso de Gr√°ficos")
    if len(sys.argv) < 2:
        print("\nüí° COMANDOS DISPON√çVEIS:")
        print(" python detector.py <arquivo.pdf> # Scan completo")
        print(" python detector.py page4 <arquivo.pdf> # Foco na p√°gina 4")
        print(" python detector.py page <arquivo.pdf> <N> # P√°gina espec√≠fica")
        print(" python detector.py scan <arquivo.pdf> # Scan detalhado")
        return

    command = sys.argv[1]
    if command == "page4" and len(sys.argv) > 2:
        pdf_file = sys.argv[2]
        extract_page_4_optimized(pdf_file)
    elif command == "page" and len(sys.argv) > 3:
        pdf_file = sys.argv[2]
        page_num = int(sys.argv[3])
        analyze_specific_page(pdf_file, page_num)
    elif command == "scan" and len(sys.argv) > 2:
        pdf_file = sys.argv[2]
        scan_all_pages(pdf_file)
    else:
        # Comando padr√£o - scan r√°pido
        pdf_file = command
        if not Path(pdf_file).exists():
            print(f"‚ùå Arquivo n√£o encontrado: {pdf_file}")
            return
        print(f"\nüìÑ Scan r√°pido: {Path(pdf_file).name}")
        try:
            doc = fitz.open(pdf_file)
            # Verificar cada p√°gina rapidamente
            chart_candidates = []
            for page_num in range(len(doc)):
                page = doc[page_num]
                # An√°lise r√°pida
                images = len(page.get_images())
                drawings = len(page.get_drawings())
                text_words = len(page.get_text().split())
                score = 0
                if images > 0 and images <= 3:  # Poucas imagens grandes
                    score += 0.3
                if drawings > 5:  # Muitos elementos vetoriais
                    score += 0.3
                if text_words < 150:  # Pouco texto
                    score += 0.2
                if score >= 0.4:
                    chart_candidates.append({
                        "page": page_num + 1,
                        "score": round(score, 2),
                        "images": images,
                        "vectors": drawings,
                        "words": text_words
                    })

            print(f"\nüìä CANDIDATOS A GR√ÅFICO:")
            if chart_candidates:
                chart_candidates.sort(key=lambda x: x["score"], reverse=True)
                for candidate in chart_candidates:
                    print(f" üìÑ P√°gina {candidate['page']}: score {candidate['score']}")
                    print(f" üì∏ {candidate['images']} img, üé® {candidate['vectors']} vetores, üìù {candidate['words']} palavras")
                # An√°lise detalhada da melhor
                best = chart_candidates[0]
                print(f"\nüîç Analisando melhor candidato (p√°gina {best['page']})...")
                analyze_specific_page(pdf_file, best["page"], save_images=True)
            else:
                print(" ‚ùì Nenhum candidato √≥bvio encontrado")
                print(" Tente: python detector.py scan arquivo.pdf")
            doc.close()
        except Exception as e:
            print(f"‚ùå Erro: {e}")


if __name__ == "__main__":
    print("\nüí° EXEMPLO PARA SEU CASO:")
    print(" python detector.py page4 paginas.pdf")
    print()
    main()
